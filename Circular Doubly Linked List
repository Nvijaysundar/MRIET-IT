class Node:
  def __init__(self,data):
    self.data = data
    self.next = None
    self.prev = None

class Cdll:
  def __init__(self):
    self.head = None
    self.last = None
    
  def insertatend(self,data):
    newNode = Node(data)
    if self.head is None:
      self.head = newNode
      self.last = newNode
      self.head.next = self.head
      self.head.prev = self.head
    else:
      newNode.prev = self.last
      newNode.next = self.head
      self.head.prev = newNode
      self.last.next = newNode
      self.last = newNode
      
      
  def displayforward(self):
    if self.head is None:
      print("list is empty")
    else:
      temp = self.head
      while True:
        print(temp.data,end = " ")
        if (temp.next  == self.head):
          break
        temp = temp.next
  
  def insertatBegin(self,data):
    newNode = Node(data)
    if self.head is None:
      self.head = newNode
      self.last = newNode
      self.head.next = self.head
      self.head.prev = self.head
    else:
      newNode.prev = self.last
      newNode.next = self.head
      self.head.prev = newNode
      self.last.next = newNode
      self.head = newNode
  
  def insertAtPos(self,data,pos):
    if pos == 0:
      self.insertatBegin(data)
    else:
      newNode = Node(data)
      curr = self.head
      for _ in range(pos-1):
        if curr.next ==self.head:
          print("Invalid pos")
          return
        curr = curr.next
    newNode.prev = curr
    newNode.next = curr.next
    curr.next.prev= newNode
    curr.next = newNode
    if newNode.next == self.head:
      self.last = newNode
  
  def deleteatEnd(self): 
    if self.head is None:
      print("list is empty")
    else:
      self.last.prev.next = self.head
      self.last = self.last.prev
      self.head.prev = self.last
    
  def deleteatBegin(self):
    if self.head is None:
      print("list is empty")
    else:
      self.head = self.head.next
      self.head.prev = self.last
      self.last.next = self.head
      
      
  def deleteatPos(self,pos):
    if pos == 1:
      self.deleteatBegin()
    else:
      curr = self.head
      for _ in range(pos-1):
        if curr.next == self.head:
          print("invalid Pos")
          return
        curr = curr.next
    curr.next = curr.next.next
    curr.next.prev = curr
     

ob = Cdll()
ob.insertatend(1)
ob.insertatend(2)
ob.insertatend(3)
ob.insertatend(4)
ob.insertatend(5)
ob.insertatBegin(0)
ob.insertAtPos(12,5)
ob.deleteatEnd()
ob.deleteatBegin()
ob.deleteatPos(2)
ob.displayforward()
      
