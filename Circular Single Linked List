class Node:
  def __init__(self,data):
    self.data = data
    self.next = None

class Cll:
  def __init__(self):
    self.head = None
    
  def insertatend(self,data):
    newNode = Node(data)
    if self.head is None:
      self.head = newNode
      self.head.next = self.head
    else:
      temp = self.head
      while temp.next is not self.head:
        temp = temp.next
      
      temp.next = newNode
      newNode.next = self.head
  def display(self):
    if self.head is None:
      print("list is empty")
    else:
      temp = self.head
      while True:
        print(temp.data,end = " ")
        if (temp.next  == self.head):
          break
        temp = temp.next
  
  def insertatBegin(self,data):
    newNode = Node(data)
    if self.head is None:
      self.head = newNode
      self.head.next = self.head
    else:
      temp = self.head
      while temp.next is not self.head:
        temp = temp.next
      temp.next = newNode
      newNode.next = self.head
      self.head = newNode
  
  def insertAtPos(self,data,pos):
    if pos == 0:
      self.insertatBegin(data)
    else:
      newNode = Node(data)
      curr = self.head
      for _ in range(pos-1):
        if curr.next ==self.head:
          print("Invalid pos")
          return
        curr = curr.next
      
      newNode.next = curr.next
      curr.next = newNode
  
  def deleteatEnd(self): 
    if self.head is None:
      print("list is empty")
    else:
      temp = self.head
      while temp.next.next is not self.head:
        temp = temp.next
      temp.next  = self.head
    
  def deleteatBegin(self):
    if self.head is None:
      print("list is empty")
    else:
      temp = self.head
      while temp.next is not self.head:
        temp = temp.next
      
      self.head = self.head.next
      temp.next = self.head
      
  
  def deleteatPos(self,pos):
    if pos == 1:
      self.deleteatBegin()
    else:
      curr = self.head
      for _ in range(pos-1):
        if curr.next == self.head:
          print("invalid Pos")
          return
        curr = curr.next
      curr.next = curr.next.next
     

ob = Cll()
ob.insertatend(1)
ob.insertatend(2)
ob.insertatend(3)
ob.insertatend(4)
ob.insertatend(5)
ob.insertatBegin(0)
ob.insertAtPos(12,5)
ob.deleteatEnd()
ob.deleteatBegin()
ob.deleteatPos(2)
ob.display()
      
